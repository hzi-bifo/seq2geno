import pandas as pd
import os

configfile: "config.yaml"
SAMPLES_DF=pd.read_table(config["samples"], sep= '\t', header= 0).set_index("strain", drop=False)
STRAINS=SAMPLES_DF['strain'].tolist()
REF_FA=config['reference_sequence']
REF_GBK=config['reference_annotation']
TMP_D=config['tmp_d']

rule all:
    input:
        TMP_D+'/whole_genomes.aln' 
   
rule prepare_reference:
    input:
        REF_FA
    output:
        REF_FA+".fai",
        REF_FA+".bwt"

    shell:
        "samtools faidx {input};" 
        "bwa index {input}"

rule prepare_target_regions:
    input:
        REF_GBK
    output:
        TMP_D+"/reference.target_regions.fa"
    run:
        from Bio import SeqIO
	from Bio.SeqRecord import SeqRecord
	from Bio.Alphabet import IUPAC
        import re
	# read the gbk
        gbk_f= input[0]
	rec= SeqIO.read(gbk_f, 'gb')
	chromosome= rec.id
	# filter target regions types (gene, CDS...etc)
	features= [fea for fea in rec.features if fea.type == 'CDS']

	seq_records=[]
	for fea in features:
	    #print(fea.strand)
            name=fea.qualifiers['locus_tag'][0]
	    start= int(re.sub('\W','',str(fea.location.start)))
	    end= int(re.sub('\W','', str(fea.location.end)))
	    seq= rec.seq[start:end]
	    fasta_header='{}:{}-{}'.format(chromosome, str(start+1), str(end)) # notice that the coordinate should be gff style as the bcftools uses it
	    seq_rec= SeqRecord(seq, id= fasta_header, name= name, description= '')
	    seq_records.append(seq_rec)
        with open(output[0], 'w') as out_fh:
            SeqIO.write(seq_records, out_fh, 'fasta')

rule map2reference:
    input:
        REF=REF_FA,
        READS1=lambda wildcards: SAMPLES_DF.loc[wildcards.strain, 'reads1'],
        READS2=lambda wildcards: SAMPLES_DF.loc[wildcards.strain, 'reads2'],
        REF_INDEX=REF_FA+".bwt"
    output:
        TMP_D+"/{strains}/bwa.sorted.bam",
        TMP_D+"/{strains}/bwa.sorted.bam.bai"
    threads: 16
    shell:
        "bwa mem -v 2 -M -t 10 {input[REF]} {input[READS1]} {input[READS2]}| samtools view -b -@ {threads} | bamtools sort > {output[0]} ;"
        "samtools index {output[0]}"

rule call_var:
    input:
        REF=REF_FA,
        REF_FA_INDEX=REF_FA+".fai",
        BAM=TMP_D+"/{strains}/bwa.sorted.bam",
        BAM_INDEX=TMP_D+"/{strains}/bwa.sorted.bam.bai"
    output:
        TMP_D+"/{strains}/bwa.vcf"
    threads: 16
    shell:
        "freebayes-parallel <(fasta_generate_regions.py {input[REF_FA_INDEX]} 100000) {threads} -f {input[REF]} {input[BAM]} > {output};"

rule process_vcf:
    input:
        TMP_D+"/{strains}/bwa.vcf"
    output:
        TMP_D+"/{strains}/bwa.vcf.non-indel.gz",
        TMP_D+"/{strains}/bwa.vcf.non-indel.gz.tbi"
    shell:
        "vcftools --remove-indels --vcf {input} --recode --stdout| bgzip -c > {output[0]}"
        "tabix -p vcf {output[0]}"

rule consensus_whole_genome:
    input:
        REF=REF_FA,
        VCF=TMP_D+"/{strains}/bwa.vcf.non-indel.gz",
    output:
        TMP_D+"/{strains}/consensus_genome.fa"
    shell: 
        "bcftools consensus -f {input[REF]} {input[VCF]} > {output}"

rule whole_genome_alignment:
    input:
        expand(TMP_D+"/{strains}/consensus_genome.fa", strains= STRAINS)
    output:
        TMP_D+'/whole_genomes.aln' 
    shell:
        'cat {input} > {output}'
