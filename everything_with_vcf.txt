./INFER_TREE.smk:48:        vcf_gz=TMP_D+"/{strains}/{mapper}.vcf.gz"
./INFER_TREE.smk:141:        "{tmp_dir}/{strains}/"+PREFIX+".vcf"
./INFER_TREE.smk:149:        "{tmp_dir}/{strain}/{PREFIX}.vcf"
./INFER_TREE.smk:151:        #TMP_D+"/{strain}/bwa.vcf.gz",
./INFER_TREE.smk:152:        #TMP_D+"/{strain}/bwa.vcf.gz.tbi"
./INFER_TREE.smk:153:        "{tmp_dir}/{strain}/{PREFIX}.vcf.gz",
./INFER_TREE.smk:154:        "{tmp_dir}/{strain}/{PREFIX}.vcf.gz.tbi"
./INFER_TREE.smk:157:        "tabix -p vcf {output[0]}"
./INFER_TREE.smk:161:        TMP_D+"/{strain}/{PREFIX}.vcf.gz"
./INFER_TREE.smk:163:        TMP_D+"/{strain}/{PREFIX}.vcf.non-indel.gz",
./INFER_TREE.smk:164:        TMP_D+"/{strain}/{PREFIX}.vcf.non-indel.gz.tbi"
./INFER_TREE.smk:167:        "tabix -p vcf {output[0]}"
./INFER_TREE.smk:172:        VCF= TMP_D+"/{strain}/"+PREFIX+".vcf.gz",
./INFER_TREE.smk:173:        VCF_INDEX= TMP_D+"/{strain}/"+PREFIX+".vcf.gz.tbi"
./MAKE_CONS.smk:4:        vcf_gz="{TMP_D}/{strains}/{mapper}.vcf.gz"
./createFlatcount.sh:9:parallel -j 10  --joblog decompressVCF.log --retries 2 ' bgzip -d -c fastq/{}/bwa.vcf.gz > materials/{}.vcf' ::: `ls fastq| grep -v reference`
./indel_detection/pipeline.sh:17:cat $core_genes | while read i; do echo "java -jar ~/software/jvarkit/dist/msa2vcf.jar < ~/pseudo_genomics/results/assembly/v2/roary/v5/out_95/extracted_proteins_nt/${i}.aln.fasta > ${i}.vcf"; done
./indel_detection/pipeline.sh:18:#vcf to indel yes/no vector, stats and gff
./indel_detection/pipeline.sh:19:cat $core_genes | while read i ; do echo "python /net/sgi/metagenomics/projects/pseudo_genomics/src/PseudoGenomics/indel_detection/vcf2indel.py $i.vcf $i ${i}_indels.txt ${i}_indels.gff ${i}_indel_stats.txt"; done
./indel_detection/pipeline.sh:27:4. vcf
./indel_detection/vcf2indel.py:1:import vcf as VCF
./indel_detection/vcf2indel.py:3:def vcf2indel(vcf, gene_name, out, out_gff, out_stats):
./indel_detection/vcf2indel.py:9:    with open(vcf) as vcf_open:
./indel_detection/vcf2indel.py:79:    parser = argparse.ArgumentParser("parse vcf and detect indels per sample")
./indel_detection/vcf2indel.py:80:    parser.add_argument("vcf", help="vcf produced by msa2vcf")
./mutation_table.v5.py:138:# the ".flt.vcf" extension to easily open the file. Check if the number of reads
./mutation_table.v5.py:141:# If no coverage threshold is set, loop over the lines in the vcf file, skipping
./mutation_table.v5.py:161:    filename = 'tmp/'+name+"/bwa.snp-vcf"
./snps_original_methods/NOTE:13:		bcftools view $prefix.raw.bcf | vcfutils.pl varFilter -d $mindepth > $prefix.flt.vcf
./snps_original_methods/Pool1.protocol:95:# Create file dict.txt with isolate names (.flt.vcf files needed + check that there are no empty line in the dict!!)
./snps_original_methods/my_samtools_SNP_pipeline:21:bcftools view $prefix.raw.bcf | vcfutils.pl varFilter -d $mindepth > $prefix.flt.vcf
./INTERFACE.smk:28:        #vcf_gz=expand(TMP_D+"/{strains}/{mapper}.vcf.gz", strains= STRAINS, mapper= 'bwa')
./INTERFACE.smk:29:        #expand("{TMP_D}/{strains}/{mapper}.snp-vcf", TMP_D=TMP_D, strains=
./INTERFACE.smk:94:        vcf
./INTERFACE.smk:117:        vcf
./INTERFACE.smk:129:        vcf
./CREATE_INDEL_TABLE.smk:99:#cat $core_genes | while read i; do echo "java -jar ~/software/jvarkit/dist/msa2vcf.jar< ~/pseudo_genomics/results/assembly/v2/roary/v5/out_95/extracted_proteins_nt/${i}.aln.fasta> ${i}.vcf"; done
./CREATE_INDEL_TABLE.smk:103:#        "> ${{i}}.vcf\";done|"
./CREATE_INDEL_TABLE.smk:108:#        "grep vcf$ > {output[vcf_list]} "
./CREATE_INDEL_TABLE.smk:110:        "< \"{{}}.aln\" > \"{{}}.vcf\"\' ::: `cat {input[seq_aln_files_list]} | sed "
./CREATE_INDEL_TABLE.smk:112:        "cat {input[seq_aln_files_list]} | sed \'s/\.aln$/.vcf/\'"
./CREATE_INDEL_TABLE.smk:117:        #vcf_list= '{TMP_D}/indels/vcf.list',
./CREATE_INDEL_TABLE.smk:127:#vcf to indel yes/no vector, stats and gff
./CREATE_INDEL_TABLE.smk:128:#cat $core_genes | while read i ; do echo "python /net/sgi/metagenomics/projects/pseudo_genomics/src/PseudoGenomics/indel_detection/vcf2indel.py $i.vcf $i ${i}_indels.txt ${i}_indels.gff ${i}_indel_stats.txt"; done
./CREATE_INDEL_TABLE.smk:131:        "\"{{}}.vcf\" \"{{}}\" \"{{}}_indels.txt\" \"{{}}_indels.gff\" "
./CREATE_INDEL_TABLE.smk:134:        "\'s/\.vcf$//\'`;"
./CREATE_INDEL_TABLE.smk:135:        "cat {input[vcf_list]} | sed \'s/\.vcf$/.indels.txt/\'"
./DETECT_SNPS.smk:8:        vcf="{TMP_D}/{strain}/{mapper}/vcf"
./DETECT_SNPS.smk:10:        vcf_gz="{TMP_D}/{strain}/{mapper}/vcf.gz"
./DETECT_SNPS.smk:12:        "bgzip {input[vcf]}; "
./DETECT_SNPS.smk:13:        "tabix -p vcf {output[vcf_gz]}"
./DETECT_SNPS.smk:22:        vcf="{TMP_D}/{strain}/{mapper}/vcf"
./DETECT_SNPS.smk:26:        "freebayes-parallel <(fasta_generate_regions.py {input[REF_FA_INDEX]} 100000) {params[CORES]} -f {input[REF]} {input[BAM]} > {output[vcf]};"
./CREATE_SNPS_TABLE.smk:13:        snp_vcf_files=expand("{TMP_D}/{strain}/{mapper}/variant.snp-vcf", 
./CREATE_SNPS_TABLE.smk:51:        vcf_gz="{TMP_D}/{strain}/{mapper}/vcf.gz"
./CREATE_SNPS_TABLE.smk:53:        snp_vcf_f="{TMP_D}/{strain}/{mapper}/variant.snp-vcf"
